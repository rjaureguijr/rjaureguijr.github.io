{"version":3,"sources":["About.js","Projects.js","Contact.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["About","Container","React","Component","Projects","className","href","target","Contact","rel","NavBar","Navbar","collapseOnSelect","bg","expand","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","exact","to","App","path","component","Topics","Home","match","useRouteMatch","url","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAiBeA,E,uKAZP,OACI,kBAACC,EAAA,EAAD,KACI,qCACA,6DACA,6GACA,mEACA,wK,GARIC,IAAMC,WCwBXC,E,uKAvBP,OACI,yBAAKC,UAAU,aACX,wCACA,4BACI,4BAAI,uBAAGC,KAAK,aAAaD,UAAU,WAAWE,OAAO,UAAjD,eACA,4BACI,gLAIR,4BAAI,uBAAGD,KAAK,aAAaD,UAAU,WAAWE,OAAO,UAAjD,cACJ,4BACI,yLAIJ,4BAAI,uBAAGD,KAAK,eAAeD,UAAU,WAAWE,OAAO,UAAnD,sB,GAlBDL,IAAMC,WCAhBK,EAAb,uKAEQ,OACI,yBAAKH,UAAU,aACX,uCACA,4DACA,mEAEA,2CACA,2BAAG,uBAAGC,KAAK,4CAA4CC,OAAO,SAASE,IAAI,uBAAxE,aAEH,2BAAG,uBAAGH,KAAK,sCAAsCC,OAAO,SAASE,IAAI,uBAAlE,YAEH,2BAAG,uBAAGH,KAAK,gCAAR,eAbnB,GAA6BJ,IAAMC,W,gBCItBO,EAAb,uKAEQ,OACI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,GAAG,UAAUC,OAAO,KAAKC,QAAQ,QACtD,kBAACJ,EAAA,EAAOK,MAAR,uBACA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKhB,UAAU,WACX,kBAAC,IAAD,CAASA,UAAU,WAAWiB,OAAK,EAACC,GAAG,KAAvC,QACA,kBAAC,IAAD,CAASlB,UAAU,WAAWkB,GAAG,UAAjC,SACA,kBAAC,IAAD,CAASlB,UAAU,WAAWkB,GAAG,aAAjC,YAEA,kBAAC,IAAD,CAASlB,UAAU,WAAWkB,GAAG,YAAjC,kBAZxB,GAA4BrB,IAAMC,W,MCQnB,SAASqB,IACtB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAW1B,IAGhC,kBAAC,IAAD,CAAOyB,KAAK,WACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWtB,IAGnC,kBAAC,IAAD,CAAOqB,KAAK,WAAWC,UAAWlB,IAElC,kBAAC,IAAD,CAAOiB,KAAK,KACV,kBAACG,EAAD,UAQZ,SAASA,IACP,OACE,yBAAKvB,UAAU,aACb,6CACA,2FAKN,SAASsB,IACP,IAAIE,EAAQC,cAEZ,OACE,yBAAKzB,UAAU,aACb,sCAEA,4BACE,4BACE,kBAAC,IAAD,CAAMkB,GAAE,UAAKM,EAAME,IAAX,gBAAR,eAEF,4BACE,kBAAC,IAAD,CAAMR,GAAE,UAAKM,EAAME,IAAX,mBAAR,qBCjDUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASN,MACvB,2DCZNO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.171ab00e.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nclass About extends React.Component {\n    render() {\n        return (\n            <Container>\n                <h1>About</h1>\n                <h2>Hi. My name is Rudy Jauregui.</h2>\n                <p>I&rsquo;m a software development engineer focused on front end web development.</p>\n                <p>I&rsquo;m based in Chicago, Illinois.</p>\n                <p>I love working with the web and keeping current with new web development trends. I'm constantly learning new things and I love that!</p>\n            </Container>\n        );\n    }\n}\n\nexport default About;","import React from 'react';\n\nclass Projects extends React.Component {\n    render () {\n        return (\n            <div className=\"container\">\n                <h1>Projects</h1>\n                <ul>\n                    <li><a href=\"/food-find\" className=\"nav-link\" target=\"_blank\">Food / Find</a> \n                        <ul>\n                            <li>Project using the Yelp API to pull in types of food based on best match, highest rated and most reviewed. Then map location to the restaurant.\n                            </li>\n                        </ul>\n                    </li>\n                    <li><a href=\"/jam-on-it\" className=\"nav-link\" target=\"_blank\">Jam On It!</a>\n                    <ul>\n                        <li>Project using the Spotify API. This lets users search for music matching any term. The user can then add to a custom playlist and save to listen later.\n                        </li>\n                    </ul>                   \n                    </li>\n                    <li><a href=\"/coffee-time\" className=\"nav-link\" target=\"_blank\">Coffee Time</a></li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Projects;","import React from 'react';\n\nexport class Contact extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <h1>Contact</h1>\n                <p>Hi. My name is Rudy Jauregui.</p>\n                <p>I&rsquo;m based in Chicago, Illinois.</p>\n\n                <h5>Contact me:</h5> \n                <p><a href=\"https://www.linkedin.com/in/rudyjauregui/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a></p>\n                \n                <p><a href=\"https://www.twitter.com/rjaureguijr\" target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a></p>\n\n                <p><a href=\"mailto:rjaureguijr@gmail.com\">Email</a></p>\n               </div>\n        );\n    }\n}\n\n// export default About;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport { NavLink } from \"react-router-dom\";\n\nexport class NavBar extends React.Component {\n    render () {\n        return (\n            <Navbar collapseOnSelect bg=\"primary\" expand=\"sm\" variant=\"dark\">\n                <Navbar.Brand> Rudy Jauregui</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <NavLink className=\"nav-link\" exact to=\"/\">Home</NavLink>\n                        <NavLink className=\"nav-link\" to=\"/about\">About</NavLink>\n                        <NavLink className=\"nav-link\" to=\"/projects\">Projects</NavLink>\n                        {/* <NavLink className=\"nav-link\" to=\"/topics\">Topics</NavLink> */}\n                        <NavLink className=\"nav-link\" to=\"/contact\">Contact</NavLink>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n      );\n    }\n}","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch\n} from \"react-router-dom\";\nimport About from './About';\nimport Projects from './Projects';\nimport { Contact } from './Contact';\nimport { NavBar } from './Nav';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <NavBar />\n        <Switch>\n          <Route path=\"/about\" component={About}>\n            {/* <About /> */}\n          </Route>\n          <Route path=\"/topics\">\n            <Topics />\n          </Route>\n          <Route path=\"/projects\" component={Projects}>\n            {/* <Projects /> */}\n          </Route>\n          <Route path=\"/contact\" component={Contact}>\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <div className=\"container\">\n      <h1>Rudy Jauregui</h1>\n      <code>Website of Front End Developer | UI Engineer rjaureguijr</code>\n  </div>\n  );\n}\n\nfunction Topics() {\n  let match = useRouteMatch();\n\n  return (\n    <div className=\"container\">\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>\n            Props v. State\n          </Link>\n        </li>\n      </ul>\n\n      {/* The Topics page has its own <Switch> with more routes\n          that build on the /topics URL path. You can think of the\n          2nd <Route> here as an \"index\" page for all topics, or\n          the page that is shown when no topic is selected \n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n      </Switch>*/}\n    </div>\n  );\n}\n\n/* function Topic() {\n  let { topicId } = useParams();\n  return <h3>Requested topic ID: {topicId}</h3>;\n} */\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}